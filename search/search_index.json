{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started \u00b6 A language for those who think python could be made a little bit more difficult. If you're new here check the example section. Context \u00b6 This language started due to a subject at insper . As the day of creation of this language, there aren't many examples or guides on how to use llvmlite , a python implementation of the original llvm . I've tried to make this project organized and with tests to make sure that others interessed can have an easier path in. Motivation \u00b6 But why build a new language? Let me answer that with: why not? Thats the aproach of the language, throwing some sarcasm around. With so many languages been born and more heated discussions about which is the most efficient and easier to write, I've created a baseline on what is inefficient and hard to write, so everything above should be \"OK\" to use. Compile & Run \u00b6 Compile \u00b6 Execute the following command to compile the program.x file to output.o python main.py program.x output.o Create executable \u00b6 We can use gcc to transform the output.o file to an executable using: gcc output.o -o output Running \u00b6 If everything runs smoothly you should have an executable by now. Just run: ./output","title":"Getting started"},{"location":"#getting-started","text":"A language for those who think python could be made a little bit more difficult. If you're new here check the example section.","title":"Getting started"},{"location":"#context","text":"This language started due to a subject at insper . As the day of creation of this language, there aren't many examples or guides on how to use llvmlite , a python implementation of the original llvm . I've tried to make this project organized and with tests to make sure that others interessed can have an easier path in.","title":"Context"},{"location":"#motivation","text":"But why build a new language? Let me answer that with: why not? Thats the aproach of the language, throwing some sarcasm around. With so many languages been born and more heated discussions about which is the most efficient and easier to write, I've created a baseline on what is inefficient and hard to write, so everything above should be \"OK\" to use.","title":"Motivation"},{"location":"#compile-run","text":"","title":"Compile &amp; Run"},{"location":"#compile","text":"Execute the following command to compile the program.x file to output.o python main.py program.x output.o","title":"Compile"},{"location":"#create-executable","text":"We can use gcc to transform the output.o file to an executable using: gcc output.o -o output","title":"Create executable"},{"location":"#running","text":"If everything runs smoothly you should have an executable by now. Just run: ./output","title":"Running"},{"location":"src/ebnf/","text":"EBNF \u00b6 input : [ NEWLINE ] ( stmt ) * exprlist : expr ( ',' expr ) * [ ',' ] testlist : test ( ',' test ) * [ ',' ] testlist_expr : ( test | expr ) ( ',' ( test | expr )) * [ ',' ] arglist : argument ( ',' argument ) * argument : NAME NEWLINE : '\\n' | '\\n' NEWLINE suite : '{' NEWLINE stmt + '}' stmt : ( simple_stmt | compound_stmt ) simple_stmt : ( expr_stmt | return_stmt ) NEWLINE expr_stmt : ( test | NAME 'fifty-fifty' test ) return_stmt : 'return' [ testlist ] compound_stmt : ( if_stmt | while_stmt | funcdef | print_stmt ) [ NEWLINE ] if_stmt : 'isit' test suite [ 'other' suite ] while_stmt : 'during' test suite funcdef : 'hmmm' NAME '(' [ arglist ] ')' suite funccall : NAME '(' [ testlist ] ')' print_stmt : 'print' '(' ( test | expr ) ')' test : and_test ( 'or' and_test ) * and_test : not_test ( 'and' not_test ) * not_test : 'not' not_test | comparison comparison : expr (( '<' | '>' | '==' | '>=' | '<=' | '!=' ) expr ) * expr : arith | ( arith ( '|' , '^' , '&' ) expr ) arith : term | ( term ( '+' | '-' ) arith ) term : factor | ( factor ( '*' | '/' | '%' | '//' ) term ) factor : ( '+' | '-' | '~' ) factor | atom atom : '(' test ')' | NAME | NUMBER | 'None' | 'True' | 'False' | funcall","title":"EBNF"},{"location":"src/ebnf/#ebnf","text":"input : [ NEWLINE ] ( stmt ) * exprlist : expr ( ',' expr ) * [ ',' ] testlist : test ( ',' test ) * [ ',' ] testlist_expr : ( test | expr ) ( ',' ( test | expr )) * [ ',' ] arglist : argument ( ',' argument ) * argument : NAME NEWLINE : '\\n' | '\\n' NEWLINE suite : '{' NEWLINE stmt + '}' stmt : ( simple_stmt | compound_stmt ) simple_stmt : ( expr_stmt | return_stmt ) NEWLINE expr_stmt : ( test | NAME 'fifty-fifty' test ) return_stmt : 'return' [ testlist ] compound_stmt : ( if_stmt | while_stmt | funcdef | print_stmt ) [ NEWLINE ] if_stmt : 'isit' test suite [ 'other' suite ] while_stmt : 'during' test suite funcdef : 'hmmm' NAME '(' [ arglist ] ')' suite funccall : NAME '(' [ testlist ] ')' print_stmt : 'print' '(' ( test | expr ) ')' test : and_test ( 'or' and_test ) * and_test : not_test ( 'and' not_test ) * not_test : 'not' not_test | comparison comparison : expr (( '<' | '>' | '==' | '>=' | '<=' | '!=' ) expr ) * expr : arith | ( arith ( '|' , '^' , '&' ) expr ) arith : term | ( term ( '+' | '-' ) arith ) term : factor | ( factor ( '*' | '/' | '%' | '//' ) term ) factor : ( '+' | '-' | '~' ) factor | atom atom : '(' test ')' | NAME | NUMBER | 'None' | 'True' | 'False' | funcall","title":"EBNF"},{"location":"src/examples/","text":"Examples \u00b6 Warning Follow first the requirements to set up the enviroment. For this time, the language only supports int32 type. Basic operations \u00b6 Same as python, but with some restrictions. Check grammar(operations) a = 1 b = a + b Print \u00b6 This one is easy, same as python. print(0) If \u00b6 If can be implemented with or without else block. The condition is considered true if value is not equal to zero. isit(b > 2){ b = b*2 } If & Else isit(b > 2){ b = b*2 }other{ b = 0 } Function \u00b6 Lets write some code to calculate Fibonacci sequence. hmmm fibbonacci(n) { isit(n == 0){ return 0 } other{ isit(n == 1) { return 1 } other { return (fibbonacci(n-1) + fibbonacci(n-2)) }} } c fifty-fifty fibbonacci(35) print(c) Copy the block above and save in program.x . Save in the same directory of main.py.","title":"Examples"},{"location":"src/examples/#examples","text":"Warning Follow first the requirements to set up the enviroment. For this time, the language only supports int32 type.","title":"Examples"},{"location":"src/examples/#basic-operations","text":"Same as python, but with some restrictions. Check grammar(operations) a = 1 b = a + b","title":"Basic operations"},{"location":"src/examples/#print","text":"This one is easy, same as python. print(0)","title":"Print"},{"location":"src/examples/#if","text":"If can be implemented with or without else block. The condition is considered true if value is not equal to zero. isit(b > 2){ b = b*2 } If & Else isit(b > 2){ b = b*2 }other{ b = 0 }","title":"If"},{"location":"src/examples/#function","text":"Lets write some code to calculate Fibonacci sequence. hmmm fibbonacci(n) { isit(n == 0){ return 0 } other{ isit(n == 1) { return 1 } other { return (fibbonacci(n-1) + fibbonacci(n-2)) }} } c fifty-fifty fibbonacci(35) print(c) Copy the block above and save in program.x . Save in the same directory of main.py.","title":"Function"},{"location":"src/requirements/","text":"Requirements \u00b6 For building your program in compyler make sure to have the requirements described bellow. python >= 3.x gcc >= 8.3.x pip The python libraries are listed in requirements.txt . They can be quickly be installed with: pip install -r requirements.txt Test only If you whish to test the current version install the following make >= 4.x pytest run make test . If everything is ok all tests should pass.","title":"Requirements"},{"location":"src/requirements/#requirements","text":"For building your program in compyler make sure to have the requirements described bellow. python >= 3.x gcc >= 8.3.x pip The python libraries are listed in requirements.txt . They can be quickly be installed with: pip install -r requirements.txt Test only If you whish to test the current version install the following make >= 4.x pytest run make test . If everything is ok all tests should pass.","title":"Requirements"}]}