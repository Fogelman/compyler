{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started \u00b6 A language for those who think python could be made a little bit more difficult. If you're new here check the example below. Example \u00b6 Warning Follow first the requirements to set up the enviroment. Lets write some code to calculate Fibonacci sequence. hmmm fibbonacci(n) { isit(n == 0){ return 0 } other{ isit(n == 1) { return 1 } other { return (fibbonacci(n-1) + fibbonacci(n-2)) }} } c fifty-fifty fibbonacci(35) print(c) Copy the block above and save in program.x . Save in the same directory of main.py. Compile \u00b6 Execute the following command to compile the program.x file to output.o python main.py program.x output.o Create executable \u00b6 We can use gcc to transform the output.o file to an executable using: gcc output.o -o output Running \u00b6 If everything runs smoothly you should have an executable by now. Just run: ./output","title":"Getting started"},{"location":"#getting-started","text":"A language for those who think python could be made a little bit more difficult. If you're new here check the example below.","title":"Getting started"},{"location":"#example","text":"Warning Follow first the requirements to set up the enviroment. Lets write some code to calculate Fibonacci sequence. hmmm fibbonacci(n) { isit(n == 0){ return 0 } other{ isit(n == 1) { return 1 } other { return (fibbonacci(n-1) + fibbonacci(n-2)) }} } c fifty-fifty fibbonacci(35) print(c) Copy the block above and save in program.x . Save in the same directory of main.py.","title":"Example"},{"location":"#compile","text":"Execute the following command to compile the program.x file to output.o python main.py program.x output.o","title":"Compile"},{"location":"#create-executable","text":"We can use gcc to transform the output.o file to an executable using: gcc output.o -o output","title":"Create executable"},{"location":"#running","text":"If everything runs smoothly you should have an executable by now. Just run: ./output","title":"Running"},{"location":"src/ebnf/","text":"EBNF \u00b6 input : [ NEWLINE ] ( stmt ) * exprlist : expr ( ',' expr ) * [ ',' ] testlist : test ( ',' test ) * [ ',' ] testlist_expr : ( test | expr ) ( ',' ( test | expr )) * [ ',' ] arglist : argument ( ',' argument ) * argument : NAME NEWLINE : '\\n' | '\\n' NEWLINE suite : '{' NEWLINE stmt + '}' stmt : ( simple_stmt | compound_stmt ) simple_stmt : ( expr_stmt | return_stmt ) NEWLINE expr_stmt : ( test | NAME 'fifty-fifty' test ) return_stmt : 'return' [ testlist ] compound_stmt : ( if_stmt | while_stmt | funcdef | print_stmt ) [ NEWLINE ] if_stmt : 'isit' test suite [ 'other' suite ] while_stmt : 'during' test suite funcdef : 'hmmm' NAME '(' [ arglist ] ')' suite funccall : NAME '(' [ testlist ] ')' print_stmt : 'print' '(' ( test | expr ) ')' test : and_test ( 'or' and_test ) * and_test : not_test ( 'and' not_test ) * not_test : 'not' not_test | comparison comparison : expr (( '<' | '>' | '==' | '>=' | '<=' | '!=' ) expr ) * expr : arith | ( arith ( '|' , '^' , '&' ) expr ) arith : term | ( term ( '+' | '-' ) arith ) term : factor | ( factor ( '*' | '/' | '%' | '//' ) term ) factor : ( '+' | '-' | '~' ) factor | atom atom : '(' test ')' | NAME | NUMBER | 'None' | 'True' | 'False' | funcall","title":"EBNF"},{"location":"src/ebnf/#ebnf","text":"input : [ NEWLINE ] ( stmt ) * exprlist : expr ( ',' expr ) * [ ',' ] testlist : test ( ',' test ) * [ ',' ] testlist_expr : ( test | expr ) ( ',' ( test | expr )) * [ ',' ] arglist : argument ( ',' argument ) * argument : NAME NEWLINE : '\\n' | '\\n' NEWLINE suite : '{' NEWLINE stmt + '}' stmt : ( simple_stmt | compound_stmt ) simple_stmt : ( expr_stmt | return_stmt ) NEWLINE expr_stmt : ( test | NAME 'fifty-fifty' test ) return_stmt : 'return' [ testlist ] compound_stmt : ( if_stmt | while_stmt | funcdef | print_stmt ) [ NEWLINE ] if_stmt : 'isit' test suite [ 'other' suite ] while_stmt : 'during' test suite funcdef : 'hmmm' NAME '(' [ arglist ] ')' suite funccall : NAME '(' [ testlist ] ')' print_stmt : 'print' '(' ( test | expr ) ')' test : and_test ( 'or' and_test ) * and_test : not_test ( 'and' not_test ) * not_test : 'not' not_test | comparison comparison : expr (( '<' | '>' | '==' | '>=' | '<=' | '!=' ) expr ) * expr : arith | ( arith ( '|' , '^' , '&' ) expr ) arith : term | ( term ( '+' | '-' ) arith ) term : factor | ( factor ( '*' | '/' | '%' | '//' ) term ) factor : ( '+' | '-' | '~' ) factor | atom atom : '(' test ')' | NAME | NUMBER | 'None' | 'True' | 'False' | funcall","title":"EBNF"},{"location":"src/requirements/","text":"Requirements \u00b6 For building your program in pseudo-python make sure to have the requirements. python >= 3.x pip gcc >= 8.3.x and the python libraries listed in requirements.txt . pip install -r requirements.txt tests If you whish to test the current version install the following make >= 4.x pytest","title":"Requirements"},{"location":"src/requirements/#requirements","text":"For building your program in pseudo-python make sure to have the requirements. python >= 3.x pip gcc >= 8.3.x and the python libraries listed in requirements.txt . pip install -r requirements.txt tests If you whish to test the current version install the following make >= 4.x pytest","title":"Requirements"}]}